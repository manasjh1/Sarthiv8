name: Deploy to AWS EC2

on:
  push:
    branches: [ dev ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.EC2_KEY }}

    - name: Add host to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

    - name: Create .env file locally
      run: |
        cat > .env << EOF
        SUPABASE_CONNECTION_STRING=${{ secrets.SUPABASE_CONNECTION_STRING }}
        JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}
        JWT_ALGORITHM=${{ secrets.JWT_ALGORITHM }}
        JWT_EXPIRATION_HOURS=${{ secrets.JWT_EXPIRATION_HOURS }}
        OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
        OPENAI_EMBED_MODEL=${{ secrets.OPENAI_EMBED_MODEL }}
        LLM_MODEL=${{ secrets.LLM_MODEL }}
        PINECONE_API_KEY=${{ secrets.PINECONE_API_KEY }}
        PINECONE_INDEX=${{ secrets.PINECONE_INDEX }}
        PINECONE_NAMESPACE=${{ secrets.PINECONE_NAMESPACE }}
        PROMPT_CONNECTION_TIMEOUT=${{ secrets.PROMPT_CONNECTION_TIMEOUT }}
        PROMPT_MAX_POOL_CONNECTIONS=${{ secrets.PROMPT_MAX_POOL_CONNECTIONS }}
        PROMPT_MIN_POOL_CONNECTIONS=${{ secrets.PROMPT_MIN_POOL_CONNECTIONS }}
        GIC_INTENT_STAGE_ID=${{ secrets.GIC_INTENT_STAGE_ID }}
        ZEPTOMAIL_TOKEN=${{ secrets.ZEPTOMAIL_TOKEN }}
        ZEPTOMAIL_FROM_DOMAIN=${{ secrets.ZEPTOMAIL_FROM_DOMAIN }}
        ZEPTOMAIL_FROM_NAME=${{ secrets.ZEPTOMAIL_FROM_NAME }}
        WHATSAPP_ACCESS_TOKEN=${{ secrets.WHATSAPP_ACCESS_TOKEN }}
        WHATSAPP_PHONE_NUMBER_ID=${{ secrets.WHATSAPP_PHONE_NUMBER_ID }}
        WHATSAPP_TEMPLATE_NAME=${{ secrets.WHATSAPP_TEMPLATE_NAME }}
        EOF

    - name: Deploy to EC2
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          set -euo pipefail
          sudo mkdir -p /opt/sarthi
          sudo chown -R '${{ secrets.EC2_USER }}':'${{ secrets.EC2_USER }}' /opt/sarthi
          cd /opt/sarthi
          
          # Stop PM2 backend before updating code
          pm2 stop sarthi-backend || true
          
          if [ -d current ]; then
            mv current backup_$(date +%Y%m%d_%H%M%S)
          fi
          mkdir -p /tmp/sarthi-code
        '

        # Transfer code from GitHub Actions to EC2
        rsync -avz --delete \
          --exclude='.git' \
          --exclude='venv' \
          --exclude='__pycache__' \
          ./ ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }}:/tmp/sarthi-code/

        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          cp -r /tmp/sarthi-code /opt/sarthi/current
          rm -rf /tmp/sarthi-code
          cd /opt/sarthi/current
          python3.12 -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt
          chmod 600 .env
          sudo chown -R '${{ secrets.EC2_USER }}':'${{ secrets.EC2_USER }}' /opt/sarthi/current
          source venv/bin/activate
          python -c "from app.main import app; print(\"App loaded successfully\")"
        '

    - name: Start Services and Verify
      run: |
        ssh ${{ secrets.EC2_USER }}@${{ secrets.EC2_HOST }} '
          cd /opt/sarthi/current
          
          # Activate virtual environment
          source venv/bin/activate
          
          # Delete old PM2 process if it exists
          pm2 delete sarthi-backend || true
          
          # Start the backend with PM2
          pm2 start "uvicorn app.main:app --host 0.0.0.0 --port 8000" --name "sarthi-backend"
          
          # Wait for startup
          sleep 10
          
          # Check if backend is running
          if pm2 list | grep -q "sarthi-backend.*online"; then
            echo "Backend service is running successfully"
            pm2 list | grep sarthi-backend
            
            # Test the health endpoint
            echo "Testing backend health..."
            if curl -f --max-time 10 http://localhost:8000/health > /dev/null 2>&1; then
              echo "Backend health check passed"
            else
              echo "Backend health check failed"
              pm2 logs sarthi-backend --lines 20
              exit 1
            fi
            
            # Show final status
            echo "PM2 Process Status:"
            pm2 list
            echo "Recent logs:"
            pm2 logs sarthi-backend --lines 5
            
          else
            echo "Backend service failed to start"
            echo "PM2 Status:"
            pm2 list
            echo "Error logs:"
            pm2 logs sarthi-backend --lines 30
            exit 1
          fi
          
          echo "Deployment completed successfully"
        '